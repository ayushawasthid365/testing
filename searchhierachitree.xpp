[ExtensionOf(classStr(SysQueryRangeUtil))]
final class Abel_FD_Range_Extension
{
  

   

    [QueryRangeFunctionAttribute()]
    public static str getFinanceD()
    {
        Able_FinancialDim_Table abel_fd_table,abel_fd_table2,abel_fd_table3;
        
        str financialD = "";//'9301';

        str curID = XUserInfo::find(false, curUserId()).id;
        select * from abel_fd_table where abel_fd_table.id == curID;
        //for system admin
        if(abel_fd_table.ManagedBy == '')
        {
            while select  DimensionAccess from abel_fd_table
            {
                financialD = financialD + ','+ abel_fd_table.DimensionAccess;
            }
            financialD = subStr(financialD,2,strLen(financialD));
            return financialD;
        }
        // for users
        if(abel_fd_table.Level == '1' || abel_fd_table.Level == 'User')
        {
            return abel_fd_table.DimensionAccess;
        }
       

        // for managers
        select * from abel_fd_table where abel_fd_table.id == curID && abel_fd_table.ManagedBy != '' && abel_fd_table.Level != '1';
        {
            str toCheckManger = curID;
            int hier = str2Int(abel_fd_table.Level);
            str idMan[],idNotMan[];
            int i = 1, j=1, ii=1;
            while(toCheckManger)
            {
                while select * from abel_fd_table2 where abel_fd_table2.ManagedBy == toCheckManger
                {
                    Able_FinancialDim_Table abel_fin_table;
                    select id from abel_fin_table where abel_fin_table.ManagedBy == abel_fd_table2.id;

                    if(abel_fin_table.id)
                    {
                        //checking if current id is a manager
                        idMan[i] = abel_fd_table2.id;
                        i++;
                    }
                    else
                    {
                        //checking if current id is a user
                        idNotMan[ii] = abel_fd_table2.id;
                        ii++;
                    }
                }
                if(i>=j+1)
                {
                    // checking if Manager array is updated with more i than j
                    toCheckManger = idMan[j];
                    j++;
                }
                else
                {
                    // exit condition for while loop when Manager table is not updated in an iteration
                    toCheckManger = '';
                }
   
            }
            
            str ids = '';
            container con;
            // comment this if managers are not having any AU access
            con += curID;
            for (int k = 1; k <= dimOf(idMan); k++)
            {
                ids = ids + ','+idMan[k];
                con += idMan[k];
            }
            // adding non managers id in container
            for (int k = 1; k <= dimOf(idNotMan); k++)
            {
                ids = ids + ','+idNotMan[k];
                con += idNotMan[k];
            }
            ids = subStr(ids,2,strLen(ids));
            
            // adding financial dim from id in con and temp table
            while select * from abel_fd_table3 
            {
                if(conFind(con,abel_fd_table3.id))
                {
                    financialD = financialD + ','+ abel_fd_table3.DimensionAccess;
                }
            }
            
        }
        financialD = subStr(financialD,2,strLen(financialD));
      
      return financialD; // "9301";//financialD;
    }

    [QueryRangeFunctionAttribute()]
    public static str getCostCenter()
    {
        str curID = XUserInfo::find(false, curUserId()).id;
        OMUSERROLEORGANIZATION oMUSERROLEORGANIZATION;
        DIMATTRIBUTEOMCOSTCENTER dIMATTRIBUTEOMCOSTCENTER;
        OMORGANIZATIONHIERARCHYPUBLISHED oMORGANIZATIONHIERARCHYPUBLISHED,oMORGANIZATIONHIERARCHYPUBLISHED2;
        DimensionAttributeValueSetItemView dimensionAttributeValueSetItemView;
        container con;

        select * from oMUSERROLEORGANIZATION where oMUSERROLEORGANIZATION.User == curID;
        int64 temp = any2Int64(oMUSERROLEORGANIZATION.OMInternalOrganization);
        int64 hierarchyType = any2Int64(oMUSERROLEORGANIZATION.OMHierarchyType);
        
        int flag =0;
        while select * from oMORGANIZATIONHIERARCHYPUBLISHED 
            where oMORGANIZATIONHIERARCHYPUBLISHED.ParentOrganization == temp
              join dIMATTRIBUTEOMCOSTCENTER where dIMATTRIBUTEOMCOSTCENTER.Name == oMORGANIZATIONHIERARCHYPUBLISHED.ChildOrganizationName
              join dimensionAttributeValueSetItemView where dimensionAttributeValueSetItemView.DIMENSIONATTRIBUTEVALUE ==  dIMATTRIBUTEOMCOSTCENTER.Key
        {
           info("testing  "+dimensionAttributeValueSetItemView.DisplayValue +" AU "+dIMATTRIBUTEOMCOSTCENTER.Value);
            //con += dimensionAttributeValueSetItemView.DisplayValue;
              con += dIMATTRIBUTEOMCOSTCENTER.Value;
              flag =1;
            
        }
        if(flag == 0)
        {
            while select * from oMORGANIZATIONHIERARCHYPUBLISHED2 where oMORGANIZATIONHIERARCHYPUBLISHED2.ParentOrganization == temp
            {
                str childName = oMORGANIZATIONHIERARCHYPUBLISHED2.ChildOrganizationName; 
                while select * from oMORGANIZATIONHIERARCHYPUBLISHED
                    where oMORGANIZATIONHIERARCHYPUBLISHED.Hierarchy == hierarchyType && oMORGANIZATIONHIERARCHYPUBLISHED.ParentOrganizationName == childName
                    join dIMATTRIBUTEOMCOSTCENTER where dIMATTRIBUTEOMCOSTCENTER.Name == oMORGANIZATIONHIERARCHYPUBLISHED.ChildOrganizationName
                    join dimensionAttributeValueSetItemView where dimensionAttributeValueSetItemView.DIMENSIONATTRIBUTEVALUE ==  dIMATTRIBUTEOMCOSTCENTER.Key
                    {
                        info("sub testing  "+dimensionAttributeValueSetItemView.DisplayValue +" AU "+dIMATTRIBUTEOMCOSTCENTER.Value);
                        //con += dimensionAttributeValueSetItemView.DisplayValue;
                        con += dIMATTRIBUTEOMCOSTCENTER.Value;            
                    }

            }

        }
        int i;
        str financialD ="";
        for (i=1; i <= conlen(con); i++)
        {
            financialD = financialD + "," + conpeek(con, i);
        }
        financialD = subStr(financialD,2,strLen(financialD));
        return financialD;  //con2Str(con);
    }

}
